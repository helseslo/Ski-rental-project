n <- 1
# du <- 6.25*10^(-8)
# dv <- 100*du
du <- 0.0001
dv <- 0.01
mi <- 0.01
A <- mi
v0 <- 1
# dla u - komórki aktywne
Mu <- array(0, dim=c(length(x), length(y), length(t)))
matrix_center <- ceiling(length(x)/2)
# parametry ramki kwadratu
# długość boku
square_length <- 5
# szerokość ramki
square_width <- 1
# parametry początku i końca wypełniania
begin_square <- matrix_center-(square_length-1)/2
end_square <- matrix_center+(square_length-1)/2
Mu[begin_square:end_square, begin_square:end_square, 1] <- 1
# parametry początku i końca wycinania
begin_cut_out <- begin_square+square_width
end_cut_out <- end_square-square_width
Mu[begin_cut_out:end_cut_out, begin_cut_out:end_cut_out, 1] <- 0
Mu[,,1]
# dla v - jedzenia
Mv <- array(1, dim=c(length(x), length(y), length(t)))
# dla w - komórki pasywne
Mw <- array(0, dim=c(length(x), length(y), length(t)))
Mw[begin_cut_out:end_cut_out, begin_cut_out:end_cut_out, 1] <- 1
Mw[,,1]
for(next_moment in 2:length(t)){
for(i in 2:(length(x)-1)){
for(j in 2:(length(y)-1)){
current_moment <- next_moment-1
u_xx <- (Mu[i+1, j, current_moment]+Mu[i-1, j, current_moment]-2*Mu[i, j, current_moment])/(hx^2)
u_yy <- (Mu[i, j+1, current_moment]+Mu[i, j-1, current_moment]-2*Mu[i, j, current_moment])/(hy^2)
v_xx <- (Mv[i+1, j, current_moment]+Mv[i-1, j, current_moment]-2*Mv[i, j, current_moment])/(hx^2)
v_yy <- (Mv[i, j+1, current_moment]+Mv[i, j-1, current_moment]-2*Mv[i, j, current_moment])/(hy^2)
u <- Mu[i, j, current_moment]
v <- Mv[i, j, current_moment]
w <- Mw[i, j, current_moment]
Mu[i, j, next_moment] <- (u^2*v-A*u+du*(u_xx+u_yy))*ht+u
Mv[i, j, next_moment] <- (-u^2*v+dv*(v_xx+v_yy))*ht+v
Mw[i, j, next_moment] <- A*u*ht-w
}
}
}
Mu1 <- Mu[,,1]
rownames(Mu1) <- 1:nrow(Mu1)
colnames(Mu1) <- 1:ncol(Mu1)
library(pheatmap)
pheatmap(Mu1,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mu1000 <- Mu[,,1000]
## the matrix needs names
rownames(Mu1000) <- 1:nrow(Mu1000)
colnames(Mu1000) <- 1:ncol(Mu1000)
library(pheatmap)
pheatmap(Mu1000,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mu10000 <- Mu[,,10000]
## the matrix needs names
rownames(Mu10000) <- 1:nrow(Mu10000)
colnames(Mu10000) <- 1:ncol(Mu10000)
library(pheatmap)
pheatmap(Mu10000,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1 <- Mu[,,1]
## the matrix needs names
rownames(Mu1) <- 1:nrow(Mu1)
colnames(Mu1) <- 1:ncol(Mu1)
library(pheatmap)
pheatmap(Mu1,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1000 <- Mu[,,1000]
## the matrix needs names
rownames(Mu1000) <- 1:nrow(Mu1000)
colnames(Mu1000) <- 1:ncol(Mu1000)
library(pheatmap)
pheatmap(Mu1000,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv10000 <- Mu[,,10000]
## the matrix needs names
rownames(Mu10000) <- 1:nrow(Mu10000)
colnames(Mu10000) <- 1:ncol(Mu10000)
library(pheatmap)
pheatmap(Mu10000,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1 <- Mv[,,1]
## the matrix needs names
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- 1:ncol(Mv1)
library(pheatmap)
pheatmap(Mv1,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1 <- Mv[,,1]
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- 1:ncol(Mv1)
pheatmap(Mv1,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
rownames(Mv1) <- 1:nrow(Mv1)
rownames(Mv1)
nrow(Mv1)
ncol(Mv1)
colnames(Mv1)
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- ncol(Mv1)+1:ncol(Mv1)+22
pheatmap(Mv1,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- 1:ncol(Mv1)
pheatmap(Mv1)
Mv1 <- Mv[,,1]
pheatmap(Mv1)
paletteLength <- 100
myColor <- colorRampPalette(c("yellow", "white", "blue"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths
myBreaks <- c(seq(min(Mv1), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(Mv1)/paletteLength, max(Mv1), length.out=floor(paletteLength/2)))
pheatmap(Mv1,
breaks =
color = colorRampPalette(c('white','red'))(100),
pheatmap(Mv1,
breaks = myBreaks,
color = colorRampPalette(c('white','red'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
pheatmap(Mv1,
breaks = myBreaks,
color = myColor,
cluster_cols = FALSE,
cluster_rows = FALSE)
paletteLength <- 50
myColor <- colorRampPalette(c("yellow", "white", "blue"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths
myBreaks <- c(seq(min(Mv1), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(Mv1)/paletteLength, max(Mv1), length.out=floor(paletteLength/2)))
pheatmap(Mv1,
breaks = myBreaks,
color = myColor,
cluster_cols = FALSE,
cluster_rows = FALSE)
rg <- max(abs(Mv1));
pheatmap(Mv1, breaks = seq(-rg, rg, length.out = 100))
Mv1000 <- Mv[,,1000]
pheatmap(Mv1,
breaks = seq(-rg, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1000 <- Mv[,,1000]
rg <- max(abs(Mv1000));
rownames(Mv1000) <- 1:nrow(Mv1000)
colnames(Mv1000) <- 1:ncol(Mv1000)
pheatmap(Mv1000,
breaks = seq(-rg, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv10000 <- Mv[,,10000]
rownames(Mv10000) <- 1:nrow(Mv10000)
colnames(Mv10000) <- 1:ncol(Mv10000)
pheatmap(Mv10000,
breaks = seq(-rg, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(-rg, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv10000 <- Mv[,,10000]
rownames(Mv10000) <- 1:nrow(Mv10000)
colnames(Mv10000) <- 1:ncol(Mv10000)
pheatmap(Mv10000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1000 <- Mv[,,1000]
rg <- max(abs(Mv1000));
rownames(Mv1000) <- 1:nrow(Mv1000)
colnames(Mv1000) <- 1:ncol(Mv1000)
pheatmap(Mv1000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1 <- Mv[,,1]
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- 1:ncol(Mv1)
rg <- max(abs(Mv1));
pheatmap(Mv1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1000 <- Mw[,,1000]
rg <- max(abs(Mw1000));
rownames(Mw1000) <- 1:nrow(Mw1000)
colnames(Mw1000) <- 1:ncol(Mw1000)
pheatmap(Mw1000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw10000 <- Mw[,,10000]
rg <- max(abs(Mw10000));
rownames(Mw10000) <- 1:nrow(Mw10000)
colnames(Mw10000) <- 1:ncol(Mw10000)
pheatmap(Mw10000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
library(plotly)
library(ggplot2)
hx <- 0.1
hy <- 0.1
x <- seq(-1, 1, hx)
y <- seq(-1, 1, hy)
ht <- 0.01
T_max <- 100
t <- seq(0, T_max, ht)
nt <- length(t)
n <- 1
# du <- 6.25*10^(-8)
# dv <- 100*du
du <- 0.0001
dv <- 0.01
mi <- 0.01
A <- mi
v0 <- 1
# dla u - komórki aktywne
Mu <- array(0, dim=c(length(x), length(y), length(t)))
matrix_center <- ceiling(length(x)/2)
# parametry ramki kwadratu
# długość boku
square_length <- 5
# szerokość ramki
square_width <- 1
# parametry początku i końca wypełniania
begin_square <- matrix_center-(square_length-1)/2
end_square <- matrix_center+(square_length-1)/2
Mu[begin_square:end_square, begin_square:end_square, 1] <- 1
# parametry początku i końca wycinania
begin_cut_out <- begin_square+square_width
end_cut_out <- end_square-square_width
Mu[begin_cut_out:end_cut_out, begin_cut_out:end_cut_out, 1] <- 0
# Mu[,,1]
# fig <- plot_ly(z = Mu[,,1])
# fig <- fig %>% add_surface()
# fig
# dla v - jedzenia
Mv <- array(1, dim=c(length(x), length(y), length(t)))
# dla w - komórki pasywne
Mw <- array(0, dim=c(length(x), length(y), length(t)))
# parametry środkowego kwadratu wyliczamy z tych podanych dla ramki
# będzie on taki, jak to, co wycięliśmy
Mw[begin_square:end_square, begin_square:end_square, 1] <- 1
Mw[,,1]
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
for(next_moment in 2:length(t)){
for(i in 2:(length(x)-1)){
for(j in 2:(length(y)-1)){
current_moment <- next_moment-1
u_xx <- (Mu[i+1, j, current_moment]+Mu[i-1, j, current_moment]-2*Mu[i, j, current_moment])/(hx^2)
u_yy <- (Mu[i, j+1, current_moment]+Mu[i, j-1, current_moment]-2*Mu[i, j, current_moment])/(hy^2)
v_xx <- (Mv[i+1, j, current_moment]+Mv[i-1, j, current_moment]-2*Mv[i, j, current_moment])/(hx^2)
v_yy <- (Mv[i, j+1, current_moment]+Mv[i, j-1, current_moment]-2*Mv[i, j, current_moment])/(hy^2)
u <- Mu[i, j, current_moment]
v <- Mv[i, j, current_moment]
w <- Mw[i, j, current_moment]
Mu[i, j, next_moment] <- (u^2*v-A*u+du*(u_xx+u_yy))*ht+u
Mv[i, j, next_moment] <- (-u^2*v+dv*(v_xx+v_yy))*ht+v
Mw[i, j, next_moment] <- A*u*ht-w
}
}
}
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1000 <- Mw[,,1000]
rg <- max(abs(Mw1000));
rownames(Mw1000) <- 1:nrow(Mw1000)
colnames(Mw1000) <- 1:ncol(Mw1000)
pheatmap(Mw1000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw10000 <- Mw[,,10000]
rg <- max(abs(Mw10000));
rownames(Mw10000) <- 1:nrow(Mw10000)
colnames(Mw10000) <- 1:ncol(Mw10000)
pheatmap(Mw10000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
hx <- 0.1
hy <- 0.1
x <- seq(-1, 1, hx)
y <- seq(-1, 1, hy)
ht <- 0.01
T_max <- 100
t <- seq(0, T_max, ht)
nt <- length(t)
n <- 1
# du <- 6.25*10^(-8)
# dv <- 100*du
du <- 0.00001
dv <- 0.001
mi <- 0.01
A <- mi
v0 <- 1
# dla u - komórki aktywne
Mu <- array(0, dim=c(length(x), length(y), length(t)))
matrix_center <- ceiling(length(x)/2)
# parametry ramki kwadratu
# długość boku
square_length <- 5
# szerokość ramki
square_width <- 1
# parametry początku i końca wypełniania
begin_square <- matrix_center-(square_length-1)/2
end_square <- matrix_center+(square_length-1)/2
Mu[begin_square:end_square, begin_square:end_square, 1] <- 1
# parametry początku i końca wycinania
begin_cut_out <- begin_square+square_width
end_cut_out <- end_square-square_width
Mu[begin_cut_out:end_cut_out, begin_cut_out:end_cut_out, 1] <- 0
# Mu[,,1]
# fig <- plot_ly(z = Mu[,,1])
# fig <- fig %>% add_surface()
# fig
# dla v - jedzenia
Mv <- array(1, dim=c(length(x), length(y), length(t)))
# dla w - komórki pasywne
Mw <- array(0, dim=c(length(x), length(y), length(t)))
# parametry środkowego kwadratu wyliczamy z tych podanych dla ramki
# będzie on taki, jak to, co wycięliśmy
Mw[begin_cut_out:end_cut_out, begin_cut_out:end_cut_out, 1] <- 1
Mw[,,1]
# fig <- plot_ly(z = Mw[,,1])
# fig <- fig %>% add_surface()
# fig
for(next_moment in 2:length(t)){
for(i in 2:(length(x)-1)){
for(j in 2:(length(y)-1)){
current_moment <- next_moment-1
u_xx <- (Mu[i+1, j, current_moment]+Mu[i-1, j, current_moment]-2*Mu[i, j, current_moment])/(hx^2)
u_yy <- (Mu[i, j+1, current_moment]+Mu[i, j-1, current_moment]-2*Mu[i, j, current_moment])/(hy^2)
v_xx <- (Mv[i+1, j, current_moment]+Mv[i-1, j, current_moment]-2*Mv[i, j, current_moment])/(hx^2)
v_yy <- (Mv[i, j+1, current_moment]+Mv[i, j-1, current_moment]-2*Mv[i, j, current_moment])/(hy^2)
u <- Mu[i, j, current_moment]
v <- Mv[i, j, current_moment]
w <- Mw[i, j, current_moment]
Mu[i, j, next_moment] <- (u^2*v-A*u+du*(u_xx+u_yy))*ht+u
Mv[i, j, next_moment] <- (-u^2*v+dv*(v_xx+v_yy))*ht+v
Mw[i, j, next_moment] <- A*u*ht-w
}
}
}
Mu1 <- Mu[,,1]
rownames(Mu1) <- 1:nrow(Mu1)
colnames(Mu1) <- 1:ncol(Mu1)
library(pheatmap)
pheatmap(Mu1,
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mu1000 <- Mu[,,1000]
rownames(Mu1000) <- 1:nrow(Mu1000)
colnames(Mu1000) <- 1:ncol(Mu1000)
pheatmap(Mu1000,
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mu10000 <- Mu[,,10000]
rownames(Mu10000) <- 1:nrow(Mu10000)
colnames(Mu10000) <- 1:ncol(Mu10000)
pheatmap(Mu10000,
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1 <- Mv[,,1]
rownames(Mv1) <- 1:nrow(Mv1)
colnames(Mv1) <- 1:ncol(Mv1)
rg <- max(abs(Mv1));
pheatmap(Mv1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv1000 <- Mv[,,1000]
rg <- max(abs(Mv1000));
rownames(Mv1000) <- 1:nrow(Mv1000)
colnames(Mv1000) <- 1:ncol(Mv1000)
pheatmap(Mv1000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mv10000 <- Mv[,,10000]
rownames(Mv10000) <- 1:nrow(Mv10000)
colnames(Mv10000) <- 1:ncol(Mv10000)
pheatmap(Mv10000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1 <- Mw[,,1]
rownames(Mw1) <- 1:nrow(Mw1)
colnames(Mw1) <- 1:ncol(Mw1)
rg <- max(abs(Mw1));
pheatmap(Mw1,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
Mw1000 <- Mw[,,1000]
rg <- max(abs(Mw1000));
rownames(Mw1000) <- 1:nrow(Mw1000)
colnames(Mw1000) <- 1:ncol(Mw1000)
pheatmap(Mw1000,
breaks = seq(0, rg, length.out = 100),
color = colorRampPalette(c('white','blue'))(100),
cluster_cols = FALSE,
cluster_rows = FALSE)
knitr::opts_chunk$set(echo=TRUE, warning = FALSE)
options(Encoding="UTF-8")
library(gridGraphics)
install.packages("gridGraphics")
library("gridGraphics")
library(grid)
matrix(1:9)
matrix(1:9, ncol=3)
shiny::runApp('Documents/bazunie/Ski-rental-project')
con <- dbConnect(RPostgres::Postgres(),
dbname = 'projekt', # nazwa naszej projektowej bazy
host = 'localhost',
port = '5432', # port ten sam co w psql - zwykle 5432
user = 'hela', # nasza nazwa u�ytkownika psql
password = 'hela') # i nasze has�o tego u�ytkownika
runApp('Documents/bazunie/Ski-rental-project')
runApp('Documents/bazunie/Ski-rental-project')
shiny::runApp('Documents/bazunie/Ski-rental-project')
runApp('Documents/bazunie/Ski-rental-project')
runApp('Documents/bazunie/Ski-rental-project')
runApp('Documents/bazunie/Ski-rental-project')
shiny::runApp('Documents/bazunie/Ski-rental-project')
shiny::runApp('Documents/bazunie/Ski-rental-project')
runApp('Documents/bazunie/Ski-rental-project')
